using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebRestEF.EF.Data;
using WebRestEF.EF.Models;

namespace WebRestEF.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CustomerAddressController : ControllerBase
    {
        private readonly WebRestOracleContext _context;

        public CustomerAddressController(WebRestOracleContext context)
        {
            _context = context;
        }

        // GET: api/CustomerAddress
        [HttpGet]
        public async Task<ActionResult<IEnumerable<CustomerAddress>>> GetCustomerAddresses()
        {
            return await _context.CustomerAddresses
                .Include(ca => ca.CustomerAddressCustomer)
                .Include(ca => ca.CustomerAddressAddress)
                .Include(ca => ca.CustomerAddressAddressType)
                .ToListAsync();
        }

        // GET: api/CustomerAddress/5
        [HttpGet("{id}")]
        public async Task<ActionResult<CustomerAddress>> GetCustomerAddress(string id)
        {
            var customerAddress = await _context.CustomerAddresses
                .Include(ca => ca.CustomerAddressCustomer)
                .Include(ca => ca.CustomerAddressAddress)
                .Include(ca => ca.CustomerAddressAddressType)
                .FirstOrDefaultAsync(ca => ca.CustomerAddressId == id);

            if (customerAddress == null)
            {
                return NotFound();
            }

            return customerAddress;
        }

        // PUT: api/CustomerAddress/5
        [HttpPut("{id}")]
        public async Task<IActionResult> PutCustomerAddress(string id, CustomerAddress customerAddress)
        {
            if (id != customerAddress.CustomerAddressId)
            {
                return BadRequest();
            }

            // Update timestamp fields if necessary
            customerAddress.CustomerAddressUpdtDt = DateTime.Now;

            _context.Entry(customerAddress).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!CustomerAddressExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
            catch (DbUpdateException ex)
            {
                // Handle database update exceptions (e.g., constraint violations)
                return BadRequest(new { message = ex.Message });
            }

            return NoContent();
        }

        // POST: api/CustomerAddress
        [HttpPost]
        public async Task<ActionResult<CustomerAddress>> PostCustomerAddress(CustomerAddress customerAddress)
        {
            // Set creation and update timestamps
            customerAddress.CustomerAddressCrtdDt = DateTime.Now;
            customerAddress.CustomerAddressUpdtDt = DateTime.Now;

            // Optionally generate a new ID if it's auto-generated by the database
            // customerAddress.CustomerAddressId = null;

            _context.CustomerAddresses.Add(customerAddress);
            try
            {
                await _context.SaveChangesAsync();

                // Load related entities if needed
                await _context.Entry(customerAddress).Reference(ca => ca.CustomerAddressCustomer).LoadAsync();
                await _context.Entry(customerAddress).Reference(ca => ca.CustomerAddressAddress).LoadAsync();
                await _context.Entry(customerAddress).Reference(ca => ca.CustomerAddressAddressType).LoadAsync();

                return CreatedAtAction(nameof(GetCustomerAddress), new { id = customerAddress.CustomerAddressId }, customerAddress);
            }
            catch (DbUpdateException ex)
            {
                // Handle database update exceptions (e.g., constraint violations)
                return BadRequest(new { message = ex.Message });
            }
        }

        // DELETE: api/CustomerAddress/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteCustomerAddress(string id)
        {
            var customerAddress = await _context.CustomerAddresses.FindAsync(id);
            if (customerAddress == null)
            {
                return NotFound();
            }

            _context.CustomerAddresses.Remove(customerAddress);
            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateException ex)
            {
                // Handle exceptions related to database constraints
                return BadRequest(new { message = ex.Message });
            }

            return NoContent();
        }

        private bool CustomerAddressExists(string id)
        {
            return _context.CustomerAddresses.Any(e => e.CustomerAddressId == id);
        }
    }
}
